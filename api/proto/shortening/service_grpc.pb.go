// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package shortening

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShorteningClient is the client API for Shortening service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShorteningClient interface {
	GenerateShort(ctx context.Context, in *GenerateShortRequest, opts ...grpc.CallOption) (*GenerateShortResponse, error)
	GetOriginal(ctx context.Context, in *GetOriginalRequest, opts ...grpc.CallOption) (*GetOriginalResponse, error)
	Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectResponse, error)
}

type shorteningClient struct {
	cc grpc.ClientConnInterface
}

func NewShorteningClient(cc grpc.ClientConnInterface) ShorteningClient {
	return &shorteningClient{cc}
}

func (c *shorteningClient) GenerateShort(ctx context.Context, in *GenerateShortRequest, opts ...grpc.CallOption) (*GenerateShortResponse, error) {
	out := new(GenerateShortResponse)
	err := c.cc.Invoke(ctx, "/shortening.Shortening/GenerateShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorteningClient) GetOriginal(ctx context.Context, in *GetOriginalRequest, opts ...grpc.CallOption) (*GetOriginalResponse, error) {
	out := new(GetOriginalResponse)
	err := c.cc.Invoke(ctx, "/shortening.Shortening/GetOriginal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shorteningClient) Redirect(ctx context.Context, in *RedirectRequest, opts ...grpc.CallOption) (*RedirectResponse, error) {
	out := new(RedirectResponse)
	err := c.cc.Invoke(ctx, "/shortening.Shortening/Redirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShorteningServer is the server API for Shortening service.
// All implementations must embed UnimplementedShorteningServer
// for forward compatibility
type ShorteningServer interface {
	GenerateShort(context.Context, *GenerateShortRequest) (*GenerateShortResponse, error)
	GetOriginal(context.Context, *GetOriginalRequest) (*GetOriginalResponse, error)
	Redirect(context.Context, *RedirectRequest) (*RedirectResponse, error)
	mustEmbedUnimplementedShorteningServer()
}

// UnimplementedShorteningServer must be embedded to have forward compatible implementations.
type UnimplementedShorteningServer struct {
}

func (UnimplementedShorteningServer) GenerateShort(context.Context, *GenerateShortRequest) (*GenerateShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShort not implemented")
}
func (UnimplementedShorteningServer) GetOriginal(context.Context, *GetOriginalRequest) (*GetOriginalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginal not implemented")
}
func (UnimplementedShorteningServer) Redirect(context.Context, *RedirectRequest) (*RedirectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redirect not implemented")
}
func (UnimplementedShorteningServer) mustEmbedUnimplementedShorteningServer() {}

// UnsafeShorteningServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShorteningServer will
// result in compilation errors.
type UnsafeShorteningServer interface {
	mustEmbedUnimplementedShorteningServer()
}

func RegisterShorteningServer(s grpc.ServiceRegistrar, srv ShorteningServer) {
	s.RegisterService(&Shortening_ServiceDesc, srv)
}

func _Shortening_GenerateShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorteningServer).GenerateShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortening.Shortening/GenerateShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorteningServer).GenerateShort(ctx, req.(*GenerateShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortening_GetOriginal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorteningServer).GetOriginal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortening.Shortening/GetOriginal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorteningServer).GetOriginal(ctx, req.(*GetOriginalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortening_Redirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShorteningServer).Redirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortening.Shortening/Redirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShorteningServer).Redirect(ctx, req.(*RedirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortening_ServiceDesc is the grpc.ServiceDesc for Shortening service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortening_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortening.Shortening",
	HandlerType: (*ShorteningServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateShort",
			Handler:    _Shortening_GenerateShort_Handler,
		},
		{
			MethodName: "GetOriginal",
			Handler:    _Shortening_GetOriginal_Handler,
		},
		{
			MethodName: "Redirect",
			Handler:    _Shortening_Redirect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortening/service.proto",
}
